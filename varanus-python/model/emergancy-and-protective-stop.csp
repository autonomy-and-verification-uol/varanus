-- 5.2 Emergency/Protective Stop and 5.3 Safe State Key

epsAlpha = {| reset, safe_state_key, enter_safe_state, protective_stop, restart, leave_safe_state, emergency_stop, safe_stop_cat1, system_init, enter_master_commissioning_state, systemStateIs |}

EPS_SAFE_STATE =
  reset -> EPS_RESET_STATE
  []
  --Becasue of 5.3.1
  safe_state_key.Removed -> EPS_SAFE_STATE'
  --[]
  --safe_state_key.PresentOn -> EPS_SAFE_STATE
  []
  safe_state_key.PresentOff -> EPS_RESET_STATE


EPS_SAFE_STATE' =
  safe_state_key.Replaced -> EPS_SAFE_STATE

EPS_ENABLED_STATE =
--Assumes key starts off
--  safe_state_key.PresentOff -> EPS_ENABLED_STATE
--  []
  --From 5.3.1
  safe_state_key.PresentOn -> emergency_stop -> safe_stop_cat1-> enter_safe_state -> EPS_SAFE_STATE
  []
  -- Comes from SSM
  protective_stop -> safe_stop_cat1 -> enter_safe_state -> EPS_SAFE_STATE

SystemStateInterface = {|enter_safe_state, leave_safe_state, enter_master_commissioning_state  |}

EPS_SYSTEM_STATE(systemState) =
  enter_master_commissioning_state -> EPS_SYSTEM_STATE(NotSafeState)
  []
  enter_safe_state -> EPS_SYSTEM_STATE(SafeState)
  []
  systemStateIs.systemState -> EPS_SYSTEM_STATE(systemState)
  []
  leave_safe_state -> EPS_SYSTEM_STATE(NotSafeState)



EPS_RESET_STATE =
  restart -> leave_safe_state -> EPS_ENABLED_STATE
  []
  enter_master_commissioning_state -> EPS_ENABLED_STATE

EMERGANCY_PROTECTIVE_STOP =
  system_init ->
    (EPS_ENABLED_STATE  [| SystemStateInterface |]  EPS_SYSTEM_STATE(NotSafeState) )

assert EMERGANCY_PROTECTIVE_STOP :[deadlock free]
assert EMERGANCY_PROTECTIVE_STOP :[divergence free]
assert EMERGANCY_PROTECTIVE_STOP :[deterministic]
